package com.xym.bossed.servlet.captcha;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.xym.bossed.shiro.ShiroSessionKey;

public class CaptchaCreate extends HttpServlet {
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {

		int width = 60;
		int height = 30;
		if (width <= 0)
			width = 60;
		if (height <= 0)
			height = 20;
		BufferedImage image = new BufferedImage(width, height,
				BufferedImage.TYPE_INT_RGB);
		// 获取图形上下文
		Graphics g = image.getGraphics();
		// 设定背景色
		//g.setColor(new Color(0xDCDCDC));
		g.setColor(Color.WHITE);
		g.fillRect(0, 0, width, height);
		// 画边框
		g.setColor(Color.WHITE);
		g.drawRect(0, 0, width - 1, height - 1);
		// 取随机产生的认证码
		String strEnsure = "";
		// 4代表4位验证码,如果要生成更多位的认证码,则加大数值
		for (int i = 0; i < 4; ++i) {
			strEnsure += mapTable[(int) (mapTable.length * Math.random())];
		}
		
		// put the captcha to session
		request.getSession().setAttribute(ShiroSessionKey.CAPTCHA, strEnsure);
		// 　　将认证码显示到图像中,如果要生成更多位的认证码,增加drawString语句
		g.setColor(mapColor[(int) (mapColor.length * Math.random())]);
		// g.setFont(new Font("Atlantic Inline", Font.PLAIN, 20));
		g.setFont(new Font(mapFont[(int) (mapFont.length * Math.random())],
				Font.PLAIN, 20));
		String str = strEnsure.substring(0, 1);
		g.drawString(str, 8, 17);
		str = strEnsure.substring(1, 2);
		
		g.setColor(mapColor[(int) (mapColor.length * Math.random())]);
		g.setFont(new Font(mapFont[(int) (mapFont.length * Math.random())],
				Font.PLAIN, 20));
		g.drawString(str, 20, 15);
		
		str = strEnsure.substring(2, 3);
		
		g.setColor(mapColor[(int) (mapColor.length * Math.random())]);
		g.setFont(new Font(mapFont[(int) (mapFont.length * Math.random())],
				Font.PLAIN, 20));
		g.drawString(str, 35, 18);
		
		str = strEnsure.substring(3, 4);
		
		g.setColor(mapColor[(int) (mapColor.length * Math.random())]);
		g.setFont(new Font(mapFont[(int) (mapFont.length * Math.random())],
				Font.PLAIN, 20));
		g.drawString(str, 45, 15);
		Random rand = new Random();
		// draw a line
		int x1 = rand.nextInt(width) / 2;
		int x2 = rand.nextInt(width);
		int y1 = rand.nextInt(height) / 2;
		int y2 = rand.nextInt(height);
		g.setColor(mapColor[(int) (mapColor.length * Math.random())]);
		g.drawLine(x1, y1, x2, y2);
		g.setColor(mapColor[(int) (mapColor.length * Math.random())]);
		g.drawOval(rand.nextInt(width) / 2, rand.nextInt(height) / 2,rand.nextInt(width), rand.nextInt(height));
		//g.drawRect(rand.nextInt(width) / 2, rand.nextInt(height) / 2,	rand.nextInt(width), rand.nextInt(height));
		// 随机产生10个干扰点
		for (int i = 0; i < 30; i++) {
			int x = rand.nextInt(width);
			int y = rand.nextInt(height);
			g.setColor(mapColor[(int) (mapColor.length * Math.random())]);
			g.drawOval(x, y, 1, 1);
		}
		// 释放图形上下文
		g.dispose();
		try {
			// 输出图像到页面
			ImageIO.write(image, "JPEG", response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private String mapFont[] = { Font.MONOSPACED, Font.SANS_SERIF, Font.SERIF,
			"Atlantic Inline" };
	private char mapTable[] = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
			'j', 'k', 'm', 'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',
			'y', 'z', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',
			'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'P', 'R', 'S', 'T',
			'U', 'V', 'W', 'X', 'Y', 'Z' };
	private Color mapColor[] = { Color.BLACK, Color.BLUE, Color.CYAN,
			Color.DARK_GRAY, Color.GRAY, Color.GREEN,
			Color.MAGENTA, Color.ORANGE, Color.PINK, Color.RED};

	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		this.doGet(request, response);
	}
}
